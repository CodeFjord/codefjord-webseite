name: 🚀 Staging Deployment

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20"

jobs:
  test:
    name: 🧪 Linting & Dependencies prüfen
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: codefjord_cms_staging
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📥 Repository auschecken
        uses: actions/checkout@v4

      - name: 📦 Node.js Setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔧 Backend Linting
        working-directory: ./cms-backend
        run: |
          npm install
          echo "✅ Backend dependencies installed"
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: codefjord_cms_staging
          DB_USER: root
          DB_PASSWORD: root
          JWT_SECRET: staging-secret-key
          NODE_ENV: staging

      - name: 🔧 Frontend Linting
        working-directory: ./frontend
        run: |
          npm install
          npm run lint

      - name: 🔧 Admin Panel Linting
        working-directory: ./admin-panel
        run: |
          npm install
          npm run lint

  build:
    name: 🏗️ Staging Build erstellen
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Repository auschecken
        uses: actions/checkout@v4

      - name: 📦 Node.js Setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗️ Frontend Staging Build
        working-directory: ./frontend
        run: |
          npm install
          npm run build
        env:
          NODE_ENV: staging

      - name: 🏗️ Admin Panel Staging Build
        working-directory: ./admin-panel
        run: |
          npm install
          npm run build
        env:
          NODE_ENV: staging

      - name: 📦 Staging Builds als Artefakte speichern
        uses: actions/upload-artifact@v4
        with:
          name: staging-builds
          path: |
            frontend/dist/
            admin-panel/dist/
          retention-days: 1

  deploy-staging:
    name: 🚀 Staging-Umgebung deployen
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
      - name: 📥 Repository auschecken
        uses: actions/checkout@v4

      - name: 📦 Builds herunterladen
        uses: actions/download-artifact@v4
        with:
          name: staging-builds

      - name: 🔑 SSH Key Setup
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: 🚀 Backend deployen
        run: |
          # SSH-Verbindung testen
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"

          # Backend deployment für öffentliches Repository
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "export DB_HOST='${{ secrets.DB_HOST_STAGING }}' && export DB_PORT='${{ secrets.DB_PORT_STAGING }}' && export DB_NAME='${{ secrets.DB_NAME_STAGING }}' && export DB_USER='${{ secrets.DB_USER_STAGING }}' && export DB_PASS='${{ secrets.DB_PASSWORD_STAGING }}' && export JWT_SECRET='${{ secrets.JWT_SECRET_STAGING }}' && cd /opt/codefjord-webseite && rm -rf * .[^.]* 2>/dev/null || true && git config --global --add safe.directory /opt/codefjord-webseite && git clone https://github.com/codefjord/codefjord-webseite.git . && git checkout develop && mv cms-backend cms-backend_staging && cd cms-backend_staging && rm -rf node_modules package-lock.json && npm install --production && echo 'NODE_ENV=staging' > .env && echo 'PORT=3001' >> .env && echo 'DB_HOST='\$DB_HOST >> .env && echo 'DB_PORT='\$DB_PORT >> .env && echo 'DB_NAME='\$DB_NAME >> .env && echo 'DB_USER='\$DB_USER >> .env && echo 'DB_PASS='\$DB_PASS >> .env && echo 'JWT_SECRET='\$JWT_SECRET >> .env && if screen -list | grep -q 'codefjord-backend-staging'; then screen -S codefjord-backend-staging -X quit || true; sleep 2; fi && screen -dmS codefjord-backend-staging bash -c 'cd /opt/codefjord-webseite/cms-backend_staging && npm start > /opt/codefjord-webseite/backend-staging.log 2>&1' && sleep 5 && if screen -list | grep -q 'codefjord-backend-staging'; then echo \"✅ Screen session started successfully\"; else echo \"❌ Failed to start screen session\"; exit 1; fi"

      - name: 🌐 Frontend deployen
        run: |
          echo "Building frontend for staging..."
          cd frontend
          npm install
          VITE_API_URL=https://api-staging.code-fjord.de/api npm run build
          echo "Frontend build completed"

          echo "Deploying frontend to staging..."
          rsync -avz --delete dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/html/staging.code-fjord.de/htdocs/
          echo "Frontend deployment completed"

      - name: 🔧 Admin Panel deployen
        run: |
          echo "Building admin panel for staging..."
          cd admin-panel
          npm install
          VITE_API_URL=https://api-staging.code-fjord.de/api npm run build
          echo "Admin panel build completed"

          echo "Deploying admin panel to staging..."
          rsync -avz --delete dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/html/admin-staging.code-fjord.de/htdocs/
          echo "Admin panel deployment completed"

      - name: ✅ Deployment Status
        run: |
          echo "✅ Staging-Deployment erfolgreich abgeschlossen!"
          echo "🌐 Frontend: https://staging.code-fjord.de"
          echo "🔧 Admin Panel: https://admin-staging.code-fjord.de"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"

  notify:
    name: 📢 Benachrichtigung
    runs-on: ubuntu-latest
    needs: [test, deploy-staging]
    if: always()

    steps:
      - name: 📧 Discord Benachrichtigung
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL_STAGING }}
          status: ${{ job.status }}
          title: "🚀 Staging Deployment - CodeFjord Webseite"
          description: |
            **Status**: ${{ job.status }}
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}
            **Triggered by**: ${{ github.actor }}
            **Frontend**: https://staging.code-fjord.de
            **Admin Panel**: https://admin-staging.code-fjord.de
          color: ${{ job.status == 'success' && '#00ff00' || '#ff0000' }}
